name: Test and deploy to production

on:
  push:
    branches:
      - master

jobs:

  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - uses: docker/setup-buildx-action@v2
      - name: 'Build image and export it'
        uses: docker/build-push-action@v4
        with:
          outputs: 
            type=docker,dest=/tmp/toppi.tar
          load: true
          tags: toppi:production
          push: false
          file: ./Containerfile

      - name: Start the application
        run: docker-compose -f compose.ci.yml up -d

      # Copy dependencies from the container so we don't have to npm ci twice
      - name: Copy dependencies from the container
        run: docker cp toppi:/opt/app-root/src/node_modules ./node_modules

        # https://playwrightsolutions.com/playwright-github-action-to-cache-the-browser-binaries/
      - name: Get installed Playwright version
        id: playwright-version
        run: echo "PLAYWRIGHT_VERSION=$(node -e "console.log(require('./package-lock.json').dependencies['@playwright/test'].version)")" >> $GITHUB_ENV

      - name: Cache playwright binaries
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}

      - run: npx playwright install --with-deps
        if: steps.playwright-cache.outputs.cache-hit != 'true'
      - run: npx playwright install-deps
        if: steps.playwright-cache.outputs.cache-hit != 'true'

      - name: Run your tests
        env:
          CI: true
        run: npx playwright test
      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: playwright-report
        
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: toppi
          path: /tmp/toppi.tar

  push:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - uses: actions/checkout@v3

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: toppi
          path: /tmp

      - name: Load image
        run: docker load --input /tmp/toppi.tar

      - name: Push to quay.io
        uses: redhat-actions/push-to-registry@v2
        with:
          image: toppi:production
          registry: quay.io/toska
          username: toska+github
          password: ${{ secrets.QUAY_IO_TOKEN }}
  
  sentry-release:
    runs-on: ubuntu-latest
    needs: push

    steps:
      - uses: actions/checkout@v3

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: toppi
          path: /tmp

      - name: Load image
        run: docker load --input /tmp/toppi.tar

      - name: Pull image and create a container
        run: docker create --name toppi toppi:production

      - name: Copy assets from the container
        run: docker cp toppi:/opt/app-root/src/dist ./dist

      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_URL: ${{ secrets.SENTRY_URL }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: production
          set_commits: 'skip'
          sourcemaps: ./dist/assets
          url_prefix: '~/assets'
